name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend/src-python && uv sync --dev

    - name: Create validation report
      id: validation
      run: |
        echo "# 🔍 Pull Request Validation Report" > validation_report.md
        echo "" >> validation_report.md
        echo "## Summary" >> validation_report.md
        echo "" >> validation_report.md

        # Initialize counters
        TOTAL_ERRORS=0
        TOTAL_WARNINGS=0

        # Frontend validation
        echo "## 🎨 Frontend Validation" >> validation_report.md
        echo "" >> validation_report.md

        # TypeScript type checking
        echo "### TypeScript Type Checking" >> validation_report.md
        cd frontend
        if npm run type-check > ../type_check.log 2>&1; then
          echo "✅ **PASSED** - No type errors found" >> ../validation_report.md
        else
          echo "❌ **FAILED** - Type errors found:" >> ../validation_report.md
          echo '```' >> ../validation_report.md
          cat ../type_check.log >> ../validation_report.md
          echo '```' >> ../validation_report.md
          TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
        fi
        echo "" >> ../validation_report.md

        # ESLint validation
        echo "### ESLint Code Quality" >> ../validation_report.md
        if npm run lint > ../eslint.log 2>&1; then
          echo "✅ **PASSED** - No linting errors found" >> ../validation_report.md
        else
          echo "❌ **FAILED** - Linting errors found:" >> ../validation_report.md
          echo '```' >> ../validation_report.md
          cat ../eslint.log >> ../validation_report.md
          echo '```' >> ../validation_report.md
          echo "" >> ../validation_report.md
          echo "**🔧 Fix command:** \`npm run lint --fix\`" >> ../validation_report.md
          TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
        fi
        echo "" >> ../validation_report.md

        # Prettier formatting check
        echo "### Code Formatting (Prettier)" >> ../validation_report.md
        if npm run format:check > ../prettier.log 2>&1; then
          echo "✅ **PASSED** - Code is properly formatted" >> ../validation_report.md
        else
          echo "❌ **FAILED** - Code formatting issues found:" >> ../validation_report.md
          echo '```' >> ../validation_report.md
          cat ../prettier.log >> ../validation_report.md
          echo '```' >> ../validation_report.md
          echo "" >> ../validation_report.md
          echo "**🔧 Fix command:** \`npm run format\`" >> ../validation_report.md
          TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
        fi
        echo "" >> ../validation_report.md

        # Frontend build test
        echo "### Build Test" >> ../validation_report.md
        if npm run build > ../build.log 2>&1; then
          echo "✅ **PASSED** - Frontend builds successfully" >> ../validation_report.md
        else
          echo "❌ **FAILED** - Build errors found:" >> ../validation_report.md
          echo '```' >> ../validation_report.md
          cat ../build.log >> ../validation_report.md
          echo '```' >> ../validation_report.md
          TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
        fi
        echo "" >> ../validation_report.md

        cd ..

        # Python validation
        echo "## 🐍 Python Backend Validation" >> validation_report.md
        echo "" >> validation_report.md

        cd backend/src-python

        # Flake8 linting
        echo "### Flake8 Linting" >> ../../validation_report.md
        if uv run flake8 . > ../../flake8.log 2>&1; then
          echo "✅ **PASSED** - No Python linting errors" >> ../../validation_report.md
        else
          echo "❌ **FAILED** - Python linting errors found:" >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          cat ../../flake8.log >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          echo "" >> ../../validation_report.md
          echo "**🔧 Fix command:** \`uv run black . && uv run isort .\`" >> ../../validation_report.md
          TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
        fi
        echo "" >> ../../validation_report.md

        # Black formatting
        echo "### Black Code Formatting" >> ../../validation_report.md
        if uv run black --check . > ../../black.log 2>&1; then
          echo "✅ **PASSED** - Python code is properly formatted" >> ../../validation_report.md
        else
          echo "❌ **FAILED** - Python formatting issues found:" >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          cat ../../black.log >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          echo "" >> ../../validation_report.md
          echo "**🔧 Fix command:** \`uv run black .\`" >> ../../validation_report.md
          TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
        fi
        echo "" >> ../../validation_report.md

        # MyPy type checking
        echo "### MyPy Type Checking" >> ../../validation_report.md
        if uv run mypy . > ../../mypy.log 2>&1; then
          echo "✅ **PASSED** - No Python type errors" >> ../../validation_report.md
        else
          echo "⚠️ **WARNINGS** - Python type issues found:" >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          cat ../../mypy.log >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          TOTAL_WARNINGS=$((TOTAL_WARNINGS + 1))
        fi
        echo "" >> ../../validation_report.md

        cd ../..

        # Rust validation
        echo "## 🦀 Rust Backend Validation" >> validation_report.md
        echo "" >> validation_report.md

        cd backend/src-tauri

        # Rust formatting
        echo "### Rust Formatting" >> ../../validation_report.md
        if cargo fmt --all -- --check > ../../rustfmt.log 2>&1; then
          echo "✅ **PASSED** - Rust code is properly formatted" >> ../../validation_report.md
        else
          echo "❌ **FAILED** - Rust formatting issues found:" >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          cat ../../rustfmt.log >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          echo "" >> ../../validation_report.md
          echo "**🔧 Fix command:** \`cargo fmt --all\`" >> ../../validation_report.md
          TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
        fi
        echo "" >> ../../validation_report.md

        # Clippy linting
        echo "### Clippy Linting" >> ../../validation_report.md
        if cargo clippy --all-targets --all-features -- -D warnings > ../../clippy.log 2>&1; then
          echo "✅ **PASSED** - No Clippy warnings" >> ../../validation_report.md
        else
          echo "❌ **FAILED** - Clippy warnings found:" >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          cat ../../clippy.log >> ../../validation_report.md
          echo '```' >> ../../validation_report.md
          TOTAL_WARNINGS=$((TOTAL_WARNINGS + 1))
        fi
        echo "" >> ../../validation_report.md

        cd ../..

        # Security audit
        echo "## 🔒 Security Audit" >> validation_report.md
        echo "" >> validation_report.md

        echo "### NPM Security Audit" >> validation_report.md
        cd frontend
        if npm audit --audit-level=moderate > ../npm_audit.log 2>&1; then
          echo "✅ **PASSED** - No security vulnerabilities found" >> ../validation_report.md
        else
          echo "⚠️ **WARNINGS** - Security vulnerabilities found:" >> ../validation_report.md
          echo '```' >> ../validation_report.md
          cat ../npm_audit.log >> ../validation_report.md
          echo '```' >> ../validation_report.md
          echo "" >> ../validation_report.md
          echo "**🔧 Fix command:** \`npm audit fix\`" >> ../validation_report.md
          TOTAL_WARNINGS=$((TOTAL_WARNINGS + 1))
        fi
        cd ..
        echo "" >> validation_report.md

        # Final summary
        echo "## 📊 Final Summary" >> validation_report.md
        echo "" >> validation_report.md
        echo "- **Total Errors:** $TOTAL_ERRORS" >> validation_report.md
        echo "- **Total Warnings:** $TOTAL_WARNINGS" >> validation_report.md
        echo "" >> validation_report.md

        if [ $TOTAL_ERRORS -eq 0 ]; then
          echo "🎉 **All critical validations passed!** This PR is ready for review." >> validation_report.md
          echo "validation_status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ **Validation failed!** Please fix the errors above before merging." >> validation_report.md
          echo "validation_status=failure" >> $GITHUB_OUTPUT
        fi

        echo "total_errors=$TOTAL_ERRORS" >> $GITHUB_OUTPUT
        echo "total_warnings=$TOTAL_WARNINGS" >> $GITHUB_OUTPUT

    - name: Comment PR with validation report
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('validation_report.md', 'utf8');

          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('🔍 Pull Request Validation Report')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }

    - name: Fail if validation errors found
      if: steps.validation.outputs.validation_status == 'failure'
      run: |
        echo "❌ Validation failed with ${{ steps.validation.outputs.total_errors }} errors"
        exit 1
