name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Pre-build validation - same as pre-commit
  pre-build-validation:
    name: üîç Pre-Build Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: npm ci

    - name: üî• Critical Build Validation
      run: |
        echo "üîç Running same validation as pre-commit..."

        # Frontend build test
        echo "Testing frontend build..."
        npm run build

        # TypeScript compilation errors
        echo "Checking TypeScript compilation..."
        if npm run type-check 2>&1 | grep -E "(error TS|Error:|Cannot find|Module.*not found)"; then
          echo "‚ùå TypeScript compilation errors found"
          exit 1
        fi

        # Rust build check
        echo "Testing Rust build..."
        cd src-tauri && cargo check && cd ..

        # Python syntax check
        echo "Checking Python syntax..."
        cd src-python && python -m py_compile *.py && cd ..

        echo "‚úÖ All critical validations passed - ready for release build!"

  # Build Tauri app for multiple platforms
  build-tauri:
    name: üöÄ Build Tauri App
    needs: pre-build-validation
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-20.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

    - name: Install dependencies (Ubuntu only)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install frontend dependencies
      run: npm ci

    - name: Build Tauri app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tagName: ${{ github.ref_name }}
        releaseName: 'eFlood¬≤ v__VERSION__'
        releaseBody: |
          ## üåä eFlood¬≤ Release v__VERSION__

          ### What's New
          - Latest HEC-RAS analysis capabilities
          - Enhanced VTK visualization
          - Improved performance and stability

          ### Download
          Choose the appropriate version for your operating system:
          - **Windows**: `.msi` installer
          - **macOS**: `.dmg` installer
          - **Linux**: `.AppImage` portable executable

          ### System Requirements
          - Windows 10/11, macOS 10.15+, or Linux (Ubuntu 20.04+)
          - 4GB RAM minimum, 8GB recommended
          - 2GB free disk space

          ---
          Built with ‚ù§Ô∏è using Tauri + React + Rust
        releaseDraft: false
        prerelease: false
        args: ${{ matrix.args }}

  # Post-build summary
  release-complete:
    name: ‚úÖ Release Complete
    runs-on: ubuntu-latest
    needs: [pre-build-validation, build-tauri]
    if: always()

    steps:
    - name: Release Summary
      run: |
        echo "üéâ eFlood¬≤ Release Build Complete!"
        echo ""
        echo "Pre-build validation: ${{ needs.pre-build-validation.result }}"
        echo "Tauri build: ${{ needs.build-tauri.result }}"
        echo ""
        if [[ "${{ needs.pre-build-validation.result }}" == "success" && "${{ needs.build-tauri.result }}" == "success" ]]; then
          echo "‚úÖ Release successful! Executables are now available for download."
        else
          echo "‚ùå Release failed. Check the logs above for details."
          exit 1
        fi
