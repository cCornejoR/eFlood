name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-checks:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Type checking
      run: npm run type-check
      continue-on-error: true

    - name: Lint code
      run: npm run lint
      continue-on-error: true

    - name: Build frontend
      run: npm run build

  backend-python-checks:
    name: Python Backend Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        cd src-python
        pip install -e .

    - name: Run Python syntax check
      run: |
        cd src-python
        python -m py_compile **/*.py
      continue-on-error: true

  backend-rust-checks:
    name: Rust Backend Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Check Rust build
      run: |
        cd src-tauri
        cargo check
      continue-on-error: true

    - name: Build Rust code
      run: |
        cd src-tauri
        cargo build

  build-complete:
    name: Build Complete
    runs-on: ubuntu-latest
    needs: [frontend-checks, backend-python-checks, backend-rust-checks]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "âœ… Build pipeline completed"
        echo "Frontend: ${{ needs.frontend-checks.result }}"
        echo "Python: ${{ needs.backend-python-checks.result }}"
        echo "Rust: ${{ needs.backend-rust-checks.result }}"
