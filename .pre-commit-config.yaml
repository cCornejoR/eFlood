# Pre-commit configuration optimized for CRITICAL ERRORS ONLY
# Ignores warnings and only catches build-breaking issues
# Aligned with GitHub Actions CI pipeline for consistency

repos:
  # Frontend hooks - CRITICAL ERRORS ONLY (TypeScript compilation errors)
  - repo: local
    hooks:
      - id: frontend-critical-check
        name: "üé® Frontend: TypeScript Critical Errors Only"
        entry: npm run type-check
        language: system
        files: ^src/.*\.(ts|tsx)$
        pass_filenames: false
        stages: [pre-commit]

  # Python hooks - CRITICAL ERRORS ONLY (Syntax errors)
  - repo: local
    hooks:
      - id: python-syntax-critical
        name: "üêç Python: Syntax Errors Only"
        entry: python -m py_compile
        language: system
        files: ^src-python/.*\.py$
        stages: [pre-commit]

  # Critical file integrity checks - ONLY BUILD-BREAKING ISSUES
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-merge-conflict
        stages: [pre-commit]
      - id: check-added-large-files
        args: ['--maxkb=2000']  # Increased limit to avoid false positives
        stages: [pre-commit]
      - id: detect-private-key
        stages: [pre-commit]
      - id: check-yaml
        files: ^(\.github/workflows/.*\.yml|\.pre-commit-config\.yaml|src-tauri/tauri\.conf\.json)$
        stages: [pre-commit]
      - id: check-json
        files: ^(package\.json|tsconfig\.json|src-tauri/tauri\.conf\.json)$
        stages: [pre-commit]

# Configuration to make pre-commit faster and less verbose
default_stages: [pre-commit]
fail_fast: true  # Stop on first failure for faster feedback
minimum_pre_commit_version: '3.0.0'
